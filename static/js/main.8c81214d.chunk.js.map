{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","Helpers.ts","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","isValidHttpUrl","url","newUrl","URL","protocol","err","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setTouched","hasError","inValidUrl","htmlFor","classNames","type","placeholder","event","target","onBlur","initialFormData","NewMovie","onAdd","count","setCount","formData","setFormData","isRequired","trim","newMovie","handleFormData","key","currentFormData","onSubmit","preventDefault","current","disabled","App","moviesFromServer","setMovies","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"yuEAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,8BCVpC,SAASC,EAAeC,GAC7B,IACE,IAAMC,EAAS,IAAIC,IAAIF,GAEvB,MAA2B,UAApBC,EAAOE,UAA4C,WAApBF,EAAOE,QAG9C,CAFC,MAAOC,GACP,OAAO,CACR,CACF,CCQM,IAAMC,EAA6B,SAAC,GAMpC,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,MAII,IAHJC,aAGI,MAHIF,EAGJ,MAFJG,gBAEI,aADJC,gBACI,MADO,WAAQ,EACf,EAEJ,EAAaC,oBAAS,2BAASL,EAAT,YAXfM,KAAKC,SAASC,WAAWC,MAAM,GAWhB,IAAfC,EAAP,oBAGA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KACMC,EAAWF,GAAWR,IAAaF,EACnCa,GAAcrB,EAAeQ,KACpB,WAATD,GAA8B,YAATA,IACtBW,GACAV,EAEL,OACE,sBAAKpB,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQkC,QAASL,EAAlC,SACGR,IAGH,qBAAKrB,UAAU,UAAf,SACE,uBACE6B,GAAIA,EACJ,0BAAkBV,GAClBnB,UAAWmC,IAAW,QAAS,CAC7B,YAAaH,IAEfI,KAAK,OACLC,YAAW,gBAAWhB,GACtBD,MAAOA,EACPG,SAAU,SAAAe,GAAK,OAAIf,EAASe,EAAMC,OAAOnB,MAA1B,EACfoB,OAAQ,kBAAMT,GAAW,EAAjB,MAIXC,GACC,mBAAGhC,UAAU,iBAAb,mBAAkCqB,EAAlC,kBAGDY,GACC,mBAAGjC,UAAU,iBAAb,mBAAkCqB,EAAlC,sBAIP,EC3DKoB,EAAkB,CACtBrC,MAAO,GACPC,YAAa,GACbH,OAAQ,GACRK,QAAS,GACTI,OAAQ,IAOG+B,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,EAA0BnB,mBAAS,GAAnC,mBAAOoB,EAAP,KAAcC,EAAd,KACA,EAAgCrB,mBAASiB,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAaF,EAAS1C,MAAM6C,QAC7BrC,EAAekC,EAAS5C,OAAO+C,SAC/BrC,EAAekC,EAASvC,QAAQ0C,SAChCH,EAASnC,OAAOsC,OAOfC,EAAWJ,EAQXK,EAAiB,SAACC,EAAahC,GACnC2B,GAAY,SAACM,GAAD,mBAAC,eACRA,GADO,kBAETD,EAAMhC,GAFG,GAIb,EAED,OACE,uBACEpB,UAAU,WAEVsD,SAjBiB,SAAChB,GACpBA,EAAMiB,iBACNZ,EAAMO,GARNL,GAAS,SAAAW,GAAO,OAAIA,EAAU,CAAd,IAChBT,EAAYN,EASb,EAUC,UAKE,oBAAIzC,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEmB,KAAK,QACLE,MAAM,QACND,MAAO0B,EAAS1C,MAChBmB,SAAU,SAACH,GAAD,OAAW+B,EAAe,QAAS/B,EAAnC,EACVE,UAAQ,IAGV,cAAC,EAAD,CACEH,KAAK,cACLE,MAAM,cACND,MAAO0B,EAASzC,YAChBkB,SAAU,SAACH,GAAD,OAAW+B,EAAe,cAAe/B,EAAzC,IAGZ,cAAC,EAAD,CACED,KAAK,SACLE,MAAM,YACND,MAAO0B,EAAS5C,OAChBqB,SAAU,SAACH,GAAD,OAAW+B,EAAe,SAAU/B,EAApC,EACVE,UAAQ,IAGV,cAAC,EAAD,CACEH,KAAK,UACLE,MAAM,WACND,MAAO0B,EAASvC,QAChBgB,SAAU,SAACH,GAAD,OAAW+B,EAAe,UAAW/B,EAArC,EACVE,UAAQ,IAGV,cAAC,EAAD,CACEH,KAAK,SACLE,MAAM,UACND,MAAO0B,EAASnC,OAChBY,SAAU,SAACH,GAAD,OAAW+B,EAAe,SAAU/B,EAApC,EACVE,UAAQ,IAGV,qBAAKtB,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACEoC,KAAK,SACL,UAAQ,gBACRpC,UAAU,iBACVyD,UAAWT,EAJb,uBA9CCJ,EA0DV,E,QCpGYc,EAAgB,WAC3B,MAA4BlC,mBAASmC,GAArC,mBAAOlD,EAAP,KAAemD,EAAf,KASA,OACE,sBAAK5D,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQA,MAEtB,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CAAU2C,MAbC,SAACO,GAChBU,GAAU,SAACC,GAAD,4BACLA,GADK,CAERX,GAFQ,GAIX,QAYF,ECvBDY,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.8c81214d.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","export function isValidHttpUrl(url: string) {\n  try {\n    const newUrl = new URL(url);\n\n    return newUrl.protocol === 'http:' || newUrl.protocol === 'https:';\n  } catch (err) {\n    return false;\n  }\n}\n\n// as it is optional, I've decided to use another solution\n// got it from here https://www.freecodecamp.org/news/how-to-validate-urls-in-javascript/\n// as for me, it's more convenient and readable\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { isValidHttpUrl } from '../../Helpers';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n  const inValidUrl = !isValidHttpUrl(value)\n    && (name === 'imgUrl' || name === 'imdbUrl')\n    && touched\n    && value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {inValidUrl && (\n        <p className=\"help is-danger\">{`${label} should be URL` }</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { isValidHttpUrl } from '../../Helpers';\n\nconst initialFormData = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [formData, setFormData] = useState(initialFormData);\n\n  const isRequired = formData.title.trim()\n    && isValidHttpUrl(formData.imgUrl.trim())\n    && isValidHttpUrl(formData.imdbUrl.trim())\n    && formData.imdbId.trim();\n\n  const clearForm = () => {\n    setCount(current => current + 1);\n    setFormData(initialFormData);\n  };\n\n  const newMovie = formData;\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onAdd(newMovie);\n    clearForm();\n  };\n\n  const handleFormData = (key: string, value: string) => {\n    setFormData((currentFormData) => ({\n      ...currentFormData,\n      [key]: value,\n    }));\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={formData.title}\n        onChange={(value) => handleFormData('title', value)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={formData.description}\n        onChange={(value) => handleFormData('description', value)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={formData.imgUrl}\n        onChange={(value) => handleFormData('imgUrl', value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={formData.imdbUrl}\n        onChange={(value) => handleFormData('imdbUrl', value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={formData.imdbId}\n        onChange={(value) => handleFormData('imdbId', value)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isRequired}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies((currentMovies) => [\n      ...currentMovies,\n      newMovie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}